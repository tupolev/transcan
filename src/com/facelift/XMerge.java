package com.facelift;

import org.w3c.dom.Document;

import javax.xml.xpath.XPathExpressionException;
import java.util.List;
import java.util.ListIterator;

/**
 This class gets two xliff structures:
 -The first, generated by this application
 -The second, generated by the version control system for the translations. Webtranslate.it or whatever.

And merge both structures in one, intended to be pushed again to the translation VCS.
 The VCS xliff file will be treated as master. That is, its tree will be used as master tree and updated with
 changes and new entries from the first file generated by transcan. This way, we ensure that the trans-unit IDs
 will remain unchanged. Instead, new ones will be added for new translation strings.
 A trans-unit from the origin that does not exists in the destiny, will be added with a new ID.
 A trans-unit from the origin that already exists in destiny, will be updated ONLY if the source key is the same.
    Otherwise, it will be added as a new trans-unit.
 As a last implementation, trans-units in the master file, not present in the file from transcan,
 will be removed or marked as deleted, meaning that if a trans-unit is not found on the whole project, is no more used
 and should be removed from the codebase.
 Final structure will be dumped to a file, overwriting the master file and manually pushed to the translations VCS.

 This process will be repeated for all the segmentations and the locales defined, starting of course by the en-DEV

 */
public class XMerge {
    private XConfig config;
	private List<String> loadedStrings;
	private List<Xliff> masterFiles;
	private Xliff defaultMasterFile;

	private void setConfig(XConfig config) {
		this.config = config;
	}

	private XConfig getConfig() {
		return config;
	}

	private void setLoadedStrings(List<String> loadedStrings) {
		this.loadedStrings = loadedStrings;
	}

	private List<String> getLoadedStrings() {
		return loadedStrings;
	}

	private void setMasterFiles(List<Xliff> masterFiles) {
		this.masterFiles = masterFiles;
	}

	private List<Xliff> getMasterFiles() {
		return masterFiles;
	}

	public XMerge(XConfig config, List<Xliff> masterFiles, Xliff defaultMasterFile, List<String> loadedStrings) {
		setConfig(config);
		setLoadedStrings(loadedStrings);
		setMasterFiles(masterFiles);
		setDefaultMasterFile(defaultMasterFile);
//		for (Xliff file : masterFiles) {
//			System.out.println(file.getFile().toString());
//		}
	}

	private Xliff messageBelongsToList(String messageKey) {
		Xliff targetList = null;
		int pos = messageKey.indexOf(".");
		String prefix;
		if (pos >= 0)
			prefix = messageKey.substring(0,pos);
		else
			prefix = "other";
		boolean found = false;
		Xliff item = null;
		ListIterator<Xliff> it = getMasterFiles().listIterator();
		while(!found && it.hasNext()) {
			item = it.next();
			if (item.getPrefix().equals(prefix)) {
				found = true;
				break;
			}
		}
		return (found) ? item : getDefaultMasterFile();
	}

	public void processLoadedStrings() throws XPathExpressionException {
		for (String messageKey : getLoadedStrings()) {
			Xliff list = messageBelongsToList(messageKey);
			list.insert(messageKey, false);
		}
	}



	public void setDefaultMasterFile(Xliff defaultMasterFile) {
		this.defaultMasterFile = defaultMasterFile;
	}

	public Xliff getDefaultMasterFile() {
		return defaultMasterFile;
	}

	public List<Xliff> getUpdatedMasterLists() {
		return getMasterFiles();
	}
}
